package fr.epsi.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.ejb.Stateless;
import javax.ejb.TransactionManagement;
import javax.ejb.TransactionManagementType;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import fr.epsi.dao.IdeeDao;
import fr.epsi.dao.IdeeDaoImpl;
import fr.epsi.entite.Idee;
import fr.epsi.entite.Vote;

@Stateless
@TransactionManagement(TransactionManagementType.BEAN)
public class ClassementServiceImpl implements ClassementService {
	
	@PersistenceContext
	private EntityManager em;
	
	@Resource
    private UserTransaction utx;
	
	public void getClassementTops() {
		IdeeDao daoIdee=new IdeeDaoImpl(em, utx);	
		List<Idee> idees = daoIdee.getIdeesList();			
		for(Idee i : idees) {

			int nbdetop=0;
			if(i.getVote().size() != 0) {
				for(Vote v : i.getVote()) {
					if(v.getLabelVote() == 1) {
						nbdetop++;
					}				
				}
				int t = 100;
				int x = nbdetop;
				int y = i.getVote().size();
		        double value = ((double) x) / y;
		        double pourcentage = ((double) t) * value;
				daoIdee.setPercent((int)pourcentage, i.getId());

			}else {
				daoIdee.setPercent(nbdetop, i.getId());
			}

		}
		List<Idee> ideesUpdated = daoIdee.getIdeesListSortByPercent();
		List<Idee> listTops = daoIdee.getIdeesListSortByPercent();
		
		for(Idee ibis : ideesUpdated) {
			int j = 0;
			int k = 0;			
			for(Idee lt : listTops) {
				if(k != 0) {
					// 1er critère
					if(lt.getTopPercentage() == ibis.getTopPercentage()) {
						// 2eme critère
						if(lt.getVote().size() > ibis.getVote().size()) {
							listTops.add(k, ibis);
							listTops.add(j, lt);
						}
						// 3eme critère
						else if (lt.getVote().size() == ibis.getVote().size()) {
							// > 0 = la date plus ancienne celle en argument
							if(lt.getDateEmission().compareTo(ibis.getDateEmission()) > 0) {
								listTops.add(k, ibis);
								listTops.add(j, lt);
							}
						}
					}
				}				
				k++;
			}			
			j++;
		}

		
		
		/*for(Idee ibis : ideesUpdated) {
			if(listTops.isEmpty()) {
				listTops.add(ibis);
			}
			for(Idee itops : listTops) {
				if(itops.getTopPercentage() > ibis.getTopPercentage()) {
					
				}
			}*/
			

			


	}
	

}