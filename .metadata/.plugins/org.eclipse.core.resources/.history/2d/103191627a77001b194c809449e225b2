package fr.epsi.router;

import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.ejb.EJB;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import fr.epsi.entite.Roles;
import fr.epsi.entite.User;
import fr.epsi.entite.UserRole;
import fr.epsi.service.RolesService;
import fr.epsi.service.UserRoleService;
import fr.epsi.service.UserService;

@WebServlet("/connexion")
public class ConnexionServlet extends HttpServlet{
	
	@EJB
	private UserService userService;	
	@EJB
	private RolesService rolesService;
	@EJB
	private UserRoleService userRoleService;
	
	 protected void doGet(HttpServletRequest req, HttpServletResponse resp)
		        throws ServletException, IOException
		    {
				
				 if(req.getParameter("action") != null)
				 {
					 if(req.getParameter("action").equals("register"))
					 {
					 		this.getServletContext().getRequestDispatcher("/WEB-INF/pages/connexion/FormRegister.jsp").forward(req, resp);
				 	 }
					 
				 }// On Appelle la vue pour la première fois
				 else {
				 		this.getServletContext().getRequestDispatcher("/WEB-INF/pages/connexion/FormConnexion.jsp").forward(req, resp);
				 }
		    }
	 
	 	 //Pas de controle sur le format du
	 protected void doPost(HttpServletRequest req, HttpServletResponse resp)
		        throws ServletException, IOException
		    {
		 		String regex = "^(.+)@(.+)$";
		 		Pattern pattern = Pattern.compile(regex);
				 if(req.getParameter("action") != null){
					 // CONNEXION
					 if(req.getParameter("action").equals("connect")) 
				 	 {								
						 	String mail = req.getParameter("mail") == null ? "" : req.getParameter("mail");
							String password = req.getParameter("password") == null ? "" : req.getParameter("password");
							if((mail.isEmpty() || mail == null) || (password.isEmpty() || password == null) )
							{
								req.setAttribute("Erreur", true);		
						 		this.getServletContext().getRequestDispatcher("/WEB-INF/pages/connexion/FormConnexion.jsp").forward(req, resp);
							}
							else
							{
								Boolean exist = userService.getUserExist(mail, password);
								// Pas d'erreur on se connecte :
								if(exist == true) {		
									HttpSession session = req.getSession();		
								    session.setAttribute("connected", true);
							 		try {
										int role = rolesService.getRole(userRoleService.getRoleId(userService.getUserId(mail, password)));
										if(role == 1) {
										    session.setAttribute("Admin", true);
										}else {
										    session.setAttribute("Admin", false);
										}
							 		}catch(Exception e) {
									    session.setAttribute("Admin", false);
							 			e.printStackTrace();
							 		}
								    session.setAttribute("SessionID", userService.getUserId(mail, password));
							 		this.getServletContext().getRequestDispatcher("/WEB-INF/pages/PageHome.jsp").forward(req, resp);
								}
								// Identifiants incorrects
								else {
									req.setAttribute("Erreur", false);
									req.setAttribute("ErreurInvalid", true);
							 		this.getServletContext().getRequestDispatcher("/WEB-INF/pages/connexion/FormConnexion.jsp").forward(req, resp);
								}								
							}
				 	 }
					 //REGISTER
					 else if(req.getParameter("action").equals("create"))
					 {
						 String mail = req.getParameter("mail") == null ? "" : req.getParameter("mail");
						 String password = req.getParameter("password") == null ? "" : req.getParameter("password");
						 String passwordbis = req.getParameter("passwordbis") == null ? "" : req.getParameter("passwordbis");

						 if((mail.isEmpty() || mail == null) || (password.isEmpty() || password == null) || (passwordbis.isEmpty() || passwordbis == null) )
							{
								req.setAttribute("Erreur", true);		
						 		this.getServletContext().getRequestDispatcher("/WEB-INF/pages/connexion/FormRegister.jsp").forward(req, resp);
							}
						 	// Pas d'erreur on enregistre + on redirige page de log
							else
							{
								Matcher matcher = pattern.matcher(mail);
								if(!matcher.matches()) {
									req.setAttribute("ErreurMail", true);	
							 		this.getServletContext().getRequestDispatcher("/WEB-INF/pages/connexion/FormRegister.jsp").forward(req, resp);
								}
								if(!password.equals(passwordbis)) {
									req.setAttribute("ErreurPW", true);	
							 		this.getServletContext().getRequestDispatcher("/WEB-INF/pages/connexion/FormRegister.jsp").forward(req, resp);
								}else {
									this.create(mail, password);	
							 		this.getServletContext().getRequestDispatcher("/WEB-INF/pages/connexion/FormConnexion.jsp").forward(req, resp);
								}
								
							}
														
						}
					 }
				 	 // On renvoie sur la page de login
					 else {
					 		this.getServletContext().getRequestDispatcher("/WEB-INF/pages/connexion/FormConnexion.jsp").forward(req, resp);
					 }
				 }
		    
				 
	 public void create(String mail, String password) {
			User u=new User();
			u.setMail(mail);
			u.setPassword(password);				   
			userService.createUser(u);	
			Long user_id = u.getId();				
			//On crée un role				
			Roles r =new Roles();
			r.setRoleDescription("Membre");
			r.setRoleNumeric(2);
			rolesService.createRole(r);
			Long role_id = r.getId();
			//On crée une association Role-User
			UserRole ur =new UserRole();
			ur.setRolesId(role_id);
			ur.setUserId(user_id);
			userRoleService.createUserRole(ur);	
		}

}
